server {
    server_name <%= @subdomain %>.<%= @domain %>;
    listen 80;
    resolver <%= @resolver %>;

    location / {
        return 301 https://<%= @subdomain %>.<%= @domain %>$request_uri;
    }
}

server {
    server_name <%= @subdomain %>.<%= @domain %>;
    listen 8080;
    resolver <%= @resolver %>;
    set $frontend http://<%= @frontend %>;
    set $backend http://<%= @backend %>;

    location /basic_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }

    location /content-resolver {
        rewrite ^/content-resolver(.*)$ $1 permanent;
    }

    location = / {
        proxy_pass $frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;

        include /etc/nginx/proxy;
        include /etc/nginx/cors;
        <%= @test_string %>
    }

    location = /robots.txt {
        proxy_pass $frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;

        include /etc/nginx/proxy;
        include /etc/nginx/cors;
    }

    location / {
        proxy_pass $backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-Proto $scheme;

        include /etc/nginx/proxy;
        include /etc/nginx/cors;
        <%= @test_string %>
    }
}
